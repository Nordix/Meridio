include "bird-common.conf";

define TG_ADDR4 = 11.0.0.3;
define TG_ADDR6 = 1111::3;

# Register default routes into BIRD through static blackhole routes,
# they will get announced to BGP neighbors with a local next-hop IP
# (refer to "next hop self").
# note: in kernel protocol forbid syncing these into OS routing table
#
# Needed because on routed networks (e.g. calico CNI) the POD default
# route might point towards a next hop, that's in a subnet for which
# the POD has no interface addresses configured. Such routes are
# by default rejected by BIRD!
# e.g.: <ERR> KRT: Received route 0.0.0.0/0 with strange next-hop 169.254.1.1
#
# This approach lacks possibility to withdraw such routes announced to BGP
# neighbors, should anything happen to the "default routing capabality"
# of the GW (not really relevant in k8s)... 
protocol static DEFAULT4 {
	ipv4 { preference 110; };
	route 0.0.0.0/0 blackhole;
}

protocol static DEFAULT6 {
	ipv6 { preference 110; };
	route 0::/0 blackhole;	
}

# Do not sync above default backhole routes into OS kernel.
# But export everything (VIP routes) learnt through BGP neighbors.
filter gw_kernel_export {
	if source = RTS_STATIC && dest = RTD_BLACKHOLE then reject;
	else accept;
}

# If there's a TG connecting to the GW, we should only export
# routes towards VIPs we learnt from FEs.
filter gw_tg_export {
	if ( net ~ [ 0.0.0.0/0 ] ) then reject;
	if ( net ~ [ 0::/0 ] ) then reject;
	if source = RTS_STATIC && dest = RTD_BLACKHOLE then reject;
	else accept;
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel {
	ipv4 {
#		table master4;			# Default IPv4 table is master4
		#import filter default_v4;	# Import to table, default is import all
		#export all;			# Export to protocol. default is export none
		import none;
		export filter gw_kernel_export;
	};
	merge paths on;
	#learn;			# allow learning the default route from OS routing table
	#scan time 5;		# allow scanning the OS kernel table to look for changes
}

protocol kernel {
	ipv6 {
		#import filter default_v6;	# allow importing only the default route from the OS
		#export all; 
		import none;
		export filter gw_kernel_export;
	};
	merge paths on;
	#learn;	# allow learning the default route from the kernel
	#scan time 5;
}


protocol static GW4_STATIC {
	ipv4;
	route 10.0.0.1/32
		via 169.254.100.1 bfd
		via 169.254.100.2 bfd
		via 169.254.100.3 bfd
		via 169.254.100.4 bfd
		via 169.254.100.5 bfd;
	route 20.0.0.1/32
		via 169.254.100.1 bfd
		via 169.254.100.2 bfd
		via 169.254.100.3 bfd
		via 169.254.100.4 bfd
		via 169.254.100.5 bfd;
}

protocol static GW6_STATIC {
	ipv6;
	route 2000::1/128
		via 100:100::1 bfd
		via 100:100::2 bfd
		via 100:100::3 bfd
		via 100:100::4 bfd
		via 100:100::5 bfd;
}

protocol bgp GW4 from LINK {
	local port 10179 as 4248829953;
	neighbor range 0.0.0.0/0 port 10179 as 8103;
	dynamic name "GW4_";
	interface "vlan0";
	ipv4 {
		import all;			# expecting VIP addresses from the nFE peer
		export filter default_v4;	# push only default route to the nFE peer
	};
}

protocol bgp GW6 from LINK {
	local port 10179 as 4248829953;
	neighbor range 0::/0 port 10179 as 8103;
	dynamic name "GW6_";
	interface "vlan0";
	ipv6 {
		import all;			# expecting VIP addresses from the nFE peer
		export filter default_v6;	# push only default route to the nFE peer
	};
}

# On the fly configuration of VIP addresses requires TG routes to get updated as well
protocol bgp GW_TG4 from LINK {
	local port 10179 as 4248829953;
	neighbor TG_ADDR4 port 10179 as 4248829953;
	interface "tg";
	ipv4 {
		import none;
		export filter gw_tg_export;	# push VIP addresses to TG
	};
}

protocol bgp GW_TG6 from LINK {
	local port 10179 as 4248829953;
	neighbor TG_ADDR6 port 10179 as 4248829953;
	interface "tg";
	ipv6 {
		import none;
		export filter gw_tg_export;	# push VIP addresses to TG
	};
}
