include "bird-common.conf";
include "bird-filler-net.conf";


# Register below routes into BIRD through static blackhole routes.
# They will get announced to BGP neighbors with a local next-hop IP
# (refer to "next hop self"). They will serve as cluster breakout routes
# on the cluster side.
# note: in kernel protocol forbid syncing these into OS routing table
#
# Needed because on routed networks (e.g. calico CNI) the POD default
# route might point towards a next hop, that's in a subnet for which
# the POD has no interface addresses configured. Such routes are
# by default rejected by BIRD!
# e.g.: <ERR> KRT: Received route 0.0.0.0/0 with strange next-hop 169.254.1.1
protocol static NET4_1 {
	ipv4 { preference 100; };
	route 169.254.0.0/16 blackhole;
}

protocol static NET4_2 {
        ipv4 { preference 100; };
        route 200.100.0.0/16 blackhole;
}

protocol static NET6_1 {
	ipv6 { preference 100; };
	route 100::/16 blackhole;
}

protocol static NET6_2 {
        ipv6 { preference 100; };
        route 200:100::/32 blackhole;
}

# Do not sync above backhole routes into OS kernel.
# But export everything (VIP routes) learned through BGP neighbors
# into OS kernel.
filter gw_kernel_export {
	if source = RTS_STATIC && dest = RTD_BLACKHOLE then reject;
	else accept;
}

# With this config routes that are supposed to get announced by
# local BGP are configured as static blackhole routes in BIRD.
# Routes other than default routes are also supported.
# (Due to BGP config applied, such routes will get announced
# using a local next-hop IP.)
filter bgp_announce {
	if ( net ~ [ 0.0.0.0/0 ] ) then accept;
	if ( net ~ [ 0::/0 ] ) then accept;
        if source = RTS_STATIC && dest = RTD_BLACKHOLE then accept;
	else reject;
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel {
	ipv4 {
#		table master4;			# Default IPv4 table is master4
		#import filter default_v4;	# Import to table, default is import all
		#export all;			# Export to protocol. default is export none
		import none;
		export filter gw_kernel_export;
	};
	merge paths on;
	#learn;			# allow learning the default route from OS routing table
	#scan time 5;		# allow scanning the OS kernel table to look for changes
}

protocol kernel {
	ipv6 {
		#import filter default_v6;	# allow importing only the default route from the OS
		#export all;
		import none;
		export filter gw_kernel_export;
	};
	merge paths on;
	#learn;	# allow learning the default route from the kernel
	#scan time 5;
}


protocol bgp GW4 from LINK {
	local port 10179 as 4248829953;
	neighbor range 0.0.0.0/0 port 10179 as 8103;
	dynamic name "GW4_";
	ipv4 {
		import all;			        # expecting VIP addresses from the nFE peer
		export filter bgp_announce;	# push route(s) intended to get announced to BGP peer
	};
}

protocol bgp GW6 from LINK {
	local port 10179 as 4248829953;
	neighbor range 0::/0 port 10179 as 8103;
	dynamic name "GW6_";
	ipv6 {
		import all;			        # expecting VIP addresses from the nFE peer
		export filter bgp_announce;	# push route(s) intended to get announced to BGP peer
	};
}
