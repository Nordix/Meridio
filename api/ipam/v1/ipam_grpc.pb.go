//
//Copyright (c) 2021 Nordix Foundation
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: api/ipam/v1/ipam.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ipam_Allocate_FullMethodName = "/ipam.v1.Ipam/Allocate"
	Ipam_Release_FullMethodName  = "/ipam.v1.Ipam/Release"
)

// IpamClient is the client API for Ipam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpamClient interface {
	Allocate(ctx context.Context, in *Child, opts ...grpc.CallOption) (*Prefix, error)
	Release(ctx context.Context, in *Child, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ipamClient struct {
	cc grpc.ClientConnInterface
}

func NewIpamClient(cc grpc.ClientConnInterface) IpamClient {
	return &ipamClient{cc}
}

func (c *ipamClient) Allocate(ctx context.Context, in *Child, opts ...grpc.CallOption) (*Prefix, error) {
	out := new(Prefix)
	err := c.cc.Invoke(ctx, Ipam_Allocate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamClient) Release(ctx context.Context, in *Child, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Ipam_Release_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpamServer is the server API for Ipam service.
// All implementations must embed UnimplementedIpamServer
// for forward compatibility
type IpamServer interface {
	Allocate(context.Context, *Child) (*Prefix, error)
	Release(context.Context, *Child) (*emptypb.Empty, error)
	mustEmbedUnimplementedIpamServer()
}

// UnimplementedIpamServer must be embedded to have forward compatible implementations.
type UnimplementedIpamServer struct {
}

func (UnimplementedIpamServer) Allocate(context.Context, *Child) (*Prefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedIpamServer) Release(context.Context, *Child) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedIpamServer) mustEmbedUnimplementedIpamServer() {}

// UnsafeIpamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpamServer will
// result in compilation errors.
type UnsafeIpamServer interface {
	mustEmbedUnimplementedIpamServer()
}

func RegisterIpamServer(s grpc.ServiceRegistrar, srv IpamServer) {
	s.RegisterService(&Ipam_ServiceDesc, srv)
}

func _Ipam_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Child)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipam_Allocate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServer).Allocate(ctx, req.(*Child))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipam_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Child)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipam_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServer).Release(ctx, req.(*Child))
	}
	return interceptor(ctx, in, info, handler)
}

// Ipam_ServiceDesc is the grpc.ServiceDesc for Ipam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ipam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipam.v1.Ipam",
	HandlerType: (*IpamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _Ipam_Allocate_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Ipam_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ipam/v1/ipam.proto",
}
