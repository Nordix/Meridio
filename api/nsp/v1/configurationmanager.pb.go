//
//Copyright (c) 2021-2022 Nordix Foundation
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: api/nsp/v1/configurationmanager.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_api_nsp_v1_configurationmanager_proto protoreflect.FileDescriptor

var file_api_nsp_v1_configurationmanager_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x73, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x1a,
	0x16, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x73, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xb3, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x12,
	0x0e, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x1a,
	0x16, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x12, 0x0f, 0x2e, 0x6e, 0x73,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x1a, 0x17, 0x2e, 0x6e,
	0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x0c, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x1a,
	0x14, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x56, 0x69, 0x70, 0x12, 0x0b, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x70, 0x1a, 0x13, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x2e,
	0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x19, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x3c, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x0f, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x1a, 0x17, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x26, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x72, 0x64,
	0x69, 0x78, 0x2f, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x73, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_api_nsp_v1_configurationmanager_proto_goTypes = []interface{}{
	(*Trench)(nil),            // 0: nsp.v1.Trench
	(*Conduit)(nil),           // 1: nsp.v1.Conduit
	(*Stream)(nil),            // 2: nsp.v1.Stream
	(*Flow)(nil),              // 3: nsp.v1.Flow
	(*Vip)(nil),               // 4: nsp.v1.Vip
	(*Attractor)(nil),         // 5: nsp.v1.Attractor
	(*Gateway)(nil),           // 6: nsp.v1.Gateway
	(*TrenchResponse)(nil),    // 7: nsp.v1.TrenchResponse
	(*ConduitResponse)(nil),   // 8: nsp.v1.ConduitResponse
	(*StreamResponse)(nil),    // 9: nsp.v1.StreamResponse
	(*FlowResponse)(nil),      // 10: nsp.v1.FlowResponse
	(*VipResponse)(nil),       // 11: nsp.v1.VipResponse
	(*AttractorResponse)(nil), // 12: nsp.v1.AttractorResponse
	(*GatewayResponse)(nil),   // 13: nsp.v1.GatewayResponse
}
var file_api_nsp_v1_configurationmanager_proto_depIdxs = []int32{
	0,  // 0: nsp.v1.ConfigurationManager.WatchTrench:input_type -> nsp.v1.Trench
	1,  // 1: nsp.v1.ConfigurationManager.WatchConduit:input_type -> nsp.v1.Conduit
	2,  // 2: nsp.v1.ConfigurationManager.WatchStream:input_type -> nsp.v1.Stream
	3,  // 3: nsp.v1.ConfigurationManager.WatchFlow:input_type -> nsp.v1.Flow
	4,  // 4: nsp.v1.ConfigurationManager.WatchVip:input_type -> nsp.v1.Vip
	5,  // 5: nsp.v1.ConfigurationManager.WatchAttractor:input_type -> nsp.v1.Attractor
	6,  // 6: nsp.v1.ConfigurationManager.WatchGateway:input_type -> nsp.v1.Gateway
	7,  // 7: nsp.v1.ConfigurationManager.WatchTrench:output_type -> nsp.v1.TrenchResponse
	8,  // 8: nsp.v1.ConfigurationManager.WatchConduit:output_type -> nsp.v1.ConduitResponse
	9,  // 9: nsp.v1.ConfigurationManager.WatchStream:output_type -> nsp.v1.StreamResponse
	10, // 10: nsp.v1.ConfigurationManager.WatchFlow:output_type -> nsp.v1.FlowResponse
	11, // 11: nsp.v1.ConfigurationManager.WatchVip:output_type -> nsp.v1.VipResponse
	12, // 12: nsp.v1.ConfigurationManager.WatchAttractor:output_type -> nsp.v1.AttractorResponse
	13, // 13: nsp.v1.ConfigurationManager.WatchGateway:output_type -> nsp.v1.GatewayResponse
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_nsp_v1_configurationmanager_proto_init() }
func file_api_nsp_v1_configurationmanager_proto_init() {
	if File_api_nsp_v1_configurationmanager_proto != nil {
		return
	}
	file_api_nsp_v1_model_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_nsp_v1_configurationmanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_nsp_v1_configurationmanager_proto_goTypes,
		DependencyIndexes: file_api_nsp_v1_configurationmanager_proto_depIdxs,
	}.Build()
	File_api_nsp_v1_configurationmanager_proto = out.File
	file_api_nsp_v1_configurationmanager_proto_rawDesc = nil
	file_api_nsp_v1_configurationmanager_proto_goTypes = nil
	file_api_nsp_v1_configurationmanager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigurationManagerClient is the client API for ConfigurationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigurationManagerClient interface {
	WatchTrench(ctx context.Context, in *Trench, opts ...grpc.CallOption) (ConfigurationManager_WatchTrenchClient, error)
	WatchConduit(ctx context.Context, in *Conduit, opts ...grpc.CallOption) (ConfigurationManager_WatchConduitClient, error)
	WatchStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (ConfigurationManager_WatchStreamClient, error)
	WatchFlow(ctx context.Context, in *Flow, opts ...grpc.CallOption) (ConfigurationManager_WatchFlowClient, error)
	WatchVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (ConfigurationManager_WatchVipClient, error)
	WatchAttractor(ctx context.Context, in *Attractor, opts ...grpc.CallOption) (ConfigurationManager_WatchAttractorClient, error)
	WatchGateway(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (ConfigurationManager_WatchGatewayClient, error)
}

type configurationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationManagerClient(cc grpc.ClientConnInterface) ConfigurationManagerClient {
	return &configurationManagerClient{cc}
}

func (c *configurationManagerClient) WatchTrench(ctx context.Context, in *Trench, opts ...grpc.CallOption) (ConfigurationManager_WatchTrenchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigurationManager_serviceDesc.Streams[0], "/nsp.v1.ConfigurationManager/WatchTrench", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationManagerWatchTrenchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationManager_WatchTrenchClient interface {
	Recv() (*TrenchResponse, error)
	grpc.ClientStream
}

type configurationManagerWatchTrenchClient struct {
	grpc.ClientStream
}

func (x *configurationManagerWatchTrenchClient) Recv() (*TrenchResponse, error) {
	m := new(TrenchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationManagerClient) WatchConduit(ctx context.Context, in *Conduit, opts ...grpc.CallOption) (ConfigurationManager_WatchConduitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigurationManager_serviceDesc.Streams[1], "/nsp.v1.ConfigurationManager/WatchConduit", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationManagerWatchConduitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationManager_WatchConduitClient interface {
	Recv() (*ConduitResponse, error)
	grpc.ClientStream
}

type configurationManagerWatchConduitClient struct {
	grpc.ClientStream
}

func (x *configurationManagerWatchConduitClient) Recv() (*ConduitResponse, error) {
	m := new(ConduitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationManagerClient) WatchStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (ConfigurationManager_WatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigurationManager_serviceDesc.Streams[2], "/nsp.v1.ConfigurationManager/WatchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationManagerWatchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationManager_WatchStreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type configurationManagerWatchStreamClient struct {
	grpc.ClientStream
}

func (x *configurationManagerWatchStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationManagerClient) WatchFlow(ctx context.Context, in *Flow, opts ...grpc.CallOption) (ConfigurationManager_WatchFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigurationManager_serviceDesc.Streams[3], "/nsp.v1.ConfigurationManager/WatchFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationManagerWatchFlowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationManager_WatchFlowClient interface {
	Recv() (*FlowResponse, error)
	grpc.ClientStream
}

type configurationManagerWatchFlowClient struct {
	grpc.ClientStream
}

func (x *configurationManagerWatchFlowClient) Recv() (*FlowResponse, error) {
	m := new(FlowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationManagerClient) WatchVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (ConfigurationManager_WatchVipClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigurationManager_serviceDesc.Streams[4], "/nsp.v1.ConfigurationManager/WatchVip", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationManagerWatchVipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationManager_WatchVipClient interface {
	Recv() (*VipResponse, error)
	grpc.ClientStream
}

type configurationManagerWatchVipClient struct {
	grpc.ClientStream
}

func (x *configurationManagerWatchVipClient) Recv() (*VipResponse, error) {
	m := new(VipResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationManagerClient) WatchAttractor(ctx context.Context, in *Attractor, opts ...grpc.CallOption) (ConfigurationManager_WatchAttractorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigurationManager_serviceDesc.Streams[5], "/nsp.v1.ConfigurationManager/WatchAttractor", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationManagerWatchAttractorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationManager_WatchAttractorClient interface {
	Recv() (*AttractorResponse, error)
	grpc.ClientStream
}

type configurationManagerWatchAttractorClient struct {
	grpc.ClientStream
}

func (x *configurationManagerWatchAttractorClient) Recv() (*AttractorResponse, error) {
	m := new(AttractorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationManagerClient) WatchGateway(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (ConfigurationManager_WatchGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigurationManager_serviceDesc.Streams[6], "/nsp.v1.ConfigurationManager/WatchGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationManagerWatchGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigurationManager_WatchGatewayClient interface {
	Recv() (*GatewayResponse, error)
	grpc.ClientStream
}

type configurationManagerWatchGatewayClient struct {
	grpc.ClientStream
}

func (x *configurationManagerWatchGatewayClient) Recv() (*GatewayResponse, error) {
	m := new(GatewayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigurationManagerServer is the server API for ConfigurationManager service.
type ConfigurationManagerServer interface {
	WatchTrench(*Trench, ConfigurationManager_WatchTrenchServer) error
	WatchConduit(*Conduit, ConfigurationManager_WatchConduitServer) error
	WatchStream(*Stream, ConfigurationManager_WatchStreamServer) error
	WatchFlow(*Flow, ConfigurationManager_WatchFlowServer) error
	WatchVip(*Vip, ConfigurationManager_WatchVipServer) error
	WatchAttractor(*Attractor, ConfigurationManager_WatchAttractorServer) error
	WatchGateway(*Gateway, ConfigurationManager_WatchGatewayServer) error
}

// UnimplementedConfigurationManagerServer can be embedded to have forward compatible implementations.
type UnimplementedConfigurationManagerServer struct {
}

func (*UnimplementedConfigurationManagerServer) WatchTrench(*Trench, ConfigurationManager_WatchTrenchServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTrench not implemented")
}
func (*UnimplementedConfigurationManagerServer) WatchConduit(*Conduit, ConfigurationManager_WatchConduitServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConduit not implemented")
}
func (*UnimplementedConfigurationManagerServer) WatchStream(*Stream, ConfigurationManager_WatchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchStream not implemented")
}
func (*UnimplementedConfigurationManagerServer) WatchFlow(*Flow, ConfigurationManager_WatchFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchFlow not implemented")
}
func (*UnimplementedConfigurationManagerServer) WatchVip(*Vip, ConfigurationManager_WatchVipServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchVip not implemented")
}
func (*UnimplementedConfigurationManagerServer) WatchAttractor(*Attractor, ConfigurationManager_WatchAttractorServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAttractor not implemented")
}
func (*UnimplementedConfigurationManagerServer) WatchGateway(*Gateway, ConfigurationManager_WatchGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchGateway not implemented")
}

func RegisterConfigurationManagerServer(s *grpc.Server, srv ConfigurationManagerServer) {
	s.RegisterService(&_ConfigurationManager_serviceDesc, srv)
}

func _ConfigurationManager_WatchTrench_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Trench)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationManagerServer).WatchTrench(m, &configurationManagerWatchTrenchServer{stream})
}

type ConfigurationManager_WatchTrenchServer interface {
	Send(*TrenchResponse) error
	grpc.ServerStream
}

type configurationManagerWatchTrenchServer struct {
	grpc.ServerStream
}

func (x *configurationManagerWatchTrenchServer) Send(m *TrenchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationManager_WatchConduit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Conduit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationManagerServer).WatchConduit(m, &configurationManagerWatchConduitServer{stream})
}

type ConfigurationManager_WatchConduitServer interface {
	Send(*ConduitResponse) error
	grpc.ServerStream
}

type configurationManagerWatchConduitServer struct {
	grpc.ServerStream
}

func (x *configurationManagerWatchConduitServer) Send(m *ConduitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationManager_WatchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Stream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationManagerServer).WatchStream(m, &configurationManagerWatchStreamServer{stream})
}

type ConfigurationManager_WatchStreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type configurationManagerWatchStreamServer struct {
	grpc.ServerStream
}

func (x *configurationManagerWatchStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationManager_WatchFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Flow)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationManagerServer).WatchFlow(m, &configurationManagerWatchFlowServer{stream})
}

type ConfigurationManager_WatchFlowServer interface {
	Send(*FlowResponse) error
	grpc.ServerStream
}

type configurationManagerWatchFlowServer struct {
	grpc.ServerStream
}

func (x *configurationManagerWatchFlowServer) Send(m *FlowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationManager_WatchVip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Vip)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationManagerServer).WatchVip(m, &configurationManagerWatchVipServer{stream})
}

type ConfigurationManager_WatchVipServer interface {
	Send(*VipResponse) error
	grpc.ServerStream
}

type configurationManagerWatchVipServer struct {
	grpc.ServerStream
}

func (x *configurationManagerWatchVipServer) Send(m *VipResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationManager_WatchAttractor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Attractor)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationManagerServer).WatchAttractor(m, &configurationManagerWatchAttractorServer{stream})
}

type ConfigurationManager_WatchAttractorServer interface {
	Send(*AttractorResponse) error
	grpc.ServerStream
}

type configurationManagerWatchAttractorServer struct {
	grpc.ServerStream
}

func (x *configurationManagerWatchAttractorServer) Send(m *AttractorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigurationManager_WatchGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Gateway)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationManagerServer).WatchGateway(m, &configurationManagerWatchGatewayServer{stream})
}

type ConfigurationManager_WatchGatewayServer interface {
	Send(*GatewayResponse) error
	grpc.ServerStream
}

type configurationManagerWatchGatewayServer struct {
	grpc.ServerStream
}

func (x *configurationManagerWatchGatewayServer) Send(m *GatewayResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ConfigurationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nsp.v1.ConfigurationManager",
	HandlerType: (*ConfigurationManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTrench",
			Handler:       _ConfigurationManager_WatchTrench_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchConduit",
			Handler:       _ConfigurationManager_WatchConduit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchStream",
			Handler:       _ConfigurationManager_WatchStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchFlow",
			Handler:       _ConfigurationManager_WatchFlow_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchVip",
			Handler:       _ConfigurationManager_WatchVip_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchAttractor",
			Handler:       _ConfigurationManager_WatchAttractor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchGateway",
			Handler:       _ConfigurationManager_WatchGateway_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/nsp/v1/configurationmanager.proto",
}
