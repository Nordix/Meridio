/*
Copyright (c) 2021 Nordix Foundation
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package ambassador.v1;
option go_package = "github.com/nordix/meridio/api/v1/ambassador";
import "google/protobuf/empty.proto";
import "api/nsp/v1/model.proto";

service Ambassador {
    // Connect to a conduit, so a new interface will be created.
    // The Ambassador will also connect to the trench the 
    // conduit belongs to. And, the VIPs will be added to 
    // the loopback interface.
    rpc Connect(nsp.v1.Conduit) returns (google.protobuf.Empty) {}
    // Disconnect from a conduit, so the interface will be removed.
    // The Ambassador will also close the streams which are opened
    // in the conduit. It will disconnect the target from the trench.
    // And, the VIPs will be removed from the loopback interface.
    rpc Disconnect(nsp.v1.Conduit) returns (google.protobuf.Empty) {}
    // WatchConduit will return a list of conduits containing the same 
    // properties as the one in parameter (nil properties will be 
    // ignored). On any event (any conduit created/deleted/updated)
    // the list will be sent again.
    rpc WatchConduit(nsp.v1.Conduit) returns (stream nsp.v1.ConduitResponse) {}

    // Open a stream, so the identifier will be registered
    // in the NSP service, the LBs will start load-balancing the
    // traffic to the target.
    rpc Open(nsp.v1.Stream) returns (google.protobuf.Empty) {}
    // Close a stream, so the identifier will be unregistered
    // in the NSP service, the LBs will stop load-balancing the
    // traffic to the target.
    rpc Close(nsp.v1.Stream) returns (google.protobuf.Empty) {}
    // WatchStream will return a list of streams containing the same 
    // properties as the one in parameter (nil properties will be 
    // ignored). On any event (any stream created/deleted/updated)
    // the list will be sent again.
    rpc WatchStream(nsp.v1.Stream) returns (stream nsp.v1.StreamResponse) {}
}