//
//Copyright (c) 2021 Nordix Foundation
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: api/ambassador/v1/tap.proto

package ambassador

import (
	context "context"
	v1 "github.com/nordix/meridio/api/nsp/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_api_ambassador_v1_tap_proto protoreflect.FileDescriptor

var file_api_ambassador_v1_tap_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61,
	0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x73, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xd9, 0x02, 0x0a, 0x0a, 0x41, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x6e, 0x73,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x75, 0x69, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x12,
	0x0f, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74,
	0x1a, 0x17, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x30, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x0e, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x0e, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x1a, 0x16, 0x2e, 0x6e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x72, 0x64,
	0x69, 0x78, 0x2f, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_api_ambassador_v1_tap_proto_goTypes = []interface{}{
	(*v1.Conduit)(nil),         // 0: nsp.v1.Conduit
	(*v1.Stream)(nil),          // 1: nsp.v1.Stream
	(*emptypb.Empty)(nil),      // 2: google.protobuf.Empty
	(*v1.ConduitResponse)(nil), // 3: nsp.v1.ConduitResponse
	(*v1.StreamResponse)(nil),  // 4: nsp.v1.StreamResponse
}
var file_api_ambassador_v1_tap_proto_depIdxs = []int32{
	0, // 0: ambassador.v1.Ambassador.Connect:input_type -> nsp.v1.Conduit
	0, // 1: ambassador.v1.Ambassador.Disconnect:input_type -> nsp.v1.Conduit
	0, // 2: ambassador.v1.Ambassador.WatchConduit:input_type -> nsp.v1.Conduit
	1, // 3: ambassador.v1.Ambassador.Open:input_type -> nsp.v1.Stream
	1, // 4: ambassador.v1.Ambassador.Close:input_type -> nsp.v1.Stream
	1, // 5: ambassador.v1.Ambassador.WatchStream:input_type -> nsp.v1.Stream
	2, // 6: ambassador.v1.Ambassador.Connect:output_type -> google.protobuf.Empty
	2, // 7: ambassador.v1.Ambassador.Disconnect:output_type -> google.protobuf.Empty
	3, // 8: ambassador.v1.Ambassador.WatchConduit:output_type -> nsp.v1.ConduitResponse
	2, // 9: ambassador.v1.Ambassador.Open:output_type -> google.protobuf.Empty
	2, // 10: ambassador.v1.Ambassador.Close:output_type -> google.protobuf.Empty
	4, // 11: ambassador.v1.Ambassador.WatchStream:output_type -> nsp.v1.StreamResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_ambassador_v1_tap_proto_init() }
func file_api_ambassador_v1_tap_proto_init() {
	if File_api_ambassador_v1_tap_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_ambassador_v1_tap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_ambassador_v1_tap_proto_goTypes,
		DependencyIndexes: file_api_ambassador_v1_tap_proto_depIdxs,
	}.Build()
	File_api_ambassador_v1_tap_proto = out.File
	file_api_ambassador_v1_tap_proto_rawDesc = nil
	file_api_ambassador_v1_tap_proto_goTypes = nil
	file_api_ambassador_v1_tap_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AmbassadorClient is the client API for Ambassador service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AmbassadorClient interface {
	// Connect to a conduit, so a new interface will be created.
	// The Ambassador will also connect to the trench the
	// conduit belongs to. And, the VIPs will be added to
	// the loopback interface.
	Connect(ctx context.Context, in *v1.Conduit, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Disconnect from a conduit, so the interface will be removed.
	// The Ambassador will also close the streams which are opened
	// in the conduit. It will disconnect the target from the trench.
	// And, the VIPs will be removed from the loopback interface.
	Disconnect(ctx context.Context, in *v1.Conduit, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WatchConduit will return a list of conduits containing the same
	// properties as the one in parameter (nil properties will be
	// ignored). On any event (any conduit created/deleted/updated)
	// the list will be sent again.
	WatchConduit(ctx context.Context, in *v1.Conduit, opts ...grpc.CallOption) (Ambassador_WatchConduitClient, error)
	// Open a stream, so the identifier will be registered
	// in the NSP service, the LBs will start load-balancing the
	// traffic to the target.
	Open(ctx context.Context, in *v1.Stream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Close a stream, so the identifier will be unregistered
	// in the NSP service, the LBs will stop load-balancing the
	// traffic to the target.
	Close(ctx context.Context, in *v1.Stream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WatchStream will return a list of streams containing the same
	// properties as the one in parameter (nil properties will be
	// ignored). On any event (any stream created/deleted/updated)
	// the list will be sent again.
	WatchStream(ctx context.Context, in *v1.Stream, opts ...grpc.CallOption) (Ambassador_WatchStreamClient, error)
}

type ambassadorClient struct {
	cc grpc.ClientConnInterface
}

func NewAmbassadorClient(cc grpc.ClientConnInterface) AmbassadorClient {
	return &ambassadorClient{cc}
}

func (c *ambassadorClient) Connect(ctx context.Context, in *v1.Conduit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ambassador.v1.Ambassador/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ambassadorClient) Disconnect(ctx context.Context, in *v1.Conduit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ambassador.v1.Ambassador/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ambassadorClient) WatchConduit(ctx context.Context, in *v1.Conduit, opts ...grpc.CallOption) (Ambassador_WatchConduitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ambassador_serviceDesc.Streams[0], "/ambassador.v1.Ambassador/WatchConduit", opts...)
	if err != nil {
		return nil, err
	}
	x := &ambassadorWatchConduitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ambassador_WatchConduitClient interface {
	Recv() (*v1.ConduitResponse, error)
	grpc.ClientStream
}

type ambassadorWatchConduitClient struct {
	grpc.ClientStream
}

func (x *ambassadorWatchConduitClient) Recv() (*v1.ConduitResponse, error) {
	m := new(v1.ConduitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ambassadorClient) Open(ctx context.Context, in *v1.Stream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ambassador.v1.Ambassador/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ambassadorClient) Close(ctx context.Context, in *v1.Stream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ambassador.v1.Ambassador/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ambassadorClient) WatchStream(ctx context.Context, in *v1.Stream, opts ...grpc.CallOption) (Ambassador_WatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ambassador_serviceDesc.Streams[1], "/ambassador.v1.Ambassador/WatchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ambassadorWatchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ambassador_WatchStreamClient interface {
	Recv() (*v1.StreamResponse, error)
	grpc.ClientStream
}

type ambassadorWatchStreamClient struct {
	grpc.ClientStream
}

func (x *ambassadorWatchStreamClient) Recv() (*v1.StreamResponse, error) {
	m := new(v1.StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AmbassadorServer is the server API for Ambassador service.
type AmbassadorServer interface {
	// Connect to a conduit, so a new interface will be created.
	// The Ambassador will also connect to the trench the
	// conduit belongs to. And, the VIPs will be added to
	// the loopback interface.
	Connect(context.Context, *v1.Conduit) (*emptypb.Empty, error)
	// Disconnect from a conduit, so the interface will be removed.
	// The Ambassador will also close the streams which are opened
	// in the conduit. It will disconnect the target from the trench.
	// And, the VIPs will be removed from the loopback interface.
	Disconnect(context.Context, *v1.Conduit) (*emptypb.Empty, error)
	// WatchConduit will return a list of conduits containing the same
	// properties as the one in parameter (nil properties will be
	// ignored). On any event (any conduit created/deleted/updated)
	// the list will be sent again.
	WatchConduit(*v1.Conduit, Ambassador_WatchConduitServer) error
	// Open a stream, so the identifier will be registered
	// in the NSP service, the LBs will start load-balancing the
	// traffic to the target.
	Open(context.Context, *v1.Stream) (*emptypb.Empty, error)
	// Close a stream, so the identifier will be unregistered
	// in the NSP service, the LBs will stop load-balancing the
	// traffic to the target.
	Close(context.Context, *v1.Stream) (*emptypb.Empty, error)
	// WatchStream will return a list of streams containing the same
	// properties as the one in parameter (nil properties will be
	// ignored). On any event (any stream created/deleted/updated)
	// the list will be sent again.
	WatchStream(*v1.Stream, Ambassador_WatchStreamServer) error
}

// UnimplementedAmbassadorServer can be embedded to have forward compatible implementations.
type UnimplementedAmbassadorServer struct {
}

func (*UnimplementedAmbassadorServer) Connect(context.Context, *v1.Conduit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedAmbassadorServer) Disconnect(context.Context, *v1.Conduit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedAmbassadorServer) WatchConduit(*v1.Conduit, Ambassador_WatchConduitServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConduit not implemented")
}
func (*UnimplementedAmbassadorServer) Open(context.Context, *v1.Stream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedAmbassadorServer) Close(context.Context, *v1.Stream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedAmbassadorServer) WatchStream(*v1.Stream, Ambassador_WatchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchStream not implemented")
}

func RegisterAmbassadorServer(s *grpc.Server, srv AmbassadorServer) {
	s.RegisterService(&_Ambassador_serviceDesc, srv)
}

func _Ambassador_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Conduit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbassadorServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambassador.v1.Ambassador/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbassadorServer).Connect(ctx, req.(*v1.Conduit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ambassador_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Conduit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbassadorServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambassador.v1.Ambassador/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbassadorServer).Disconnect(ctx, req.(*v1.Conduit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ambassador_WatchConduit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.Conduit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AmbassadorServer).WatchConduit(m, &ambassadorWatchConduitServer{stream})
}

type Ambassador_WatchConduitServer interface {
	Send(*v1.ConduitResponse) error
	grpc.ServerStream
}

type ambassadorWatchConduitServer struct {
	grpc.ServerStream
}

func (x *ambassadorWatchConduitServer) Send(m *v1.ConduitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ambassador_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbassadorServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambassador.v1.Ambassador/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbassadorServer).Open(ctx, req.(*v1.Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ambassador_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmbassadorServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambassador.v1.Ambassador/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmbassadorServer).Close(ctx, req.(*v1.Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ambassador_WatchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.Stream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AmbassadorServer).WatchStream(m, &ambassadorWatchStreamServer{stream})
}

type Ambassador_WatchStreamServer interface {
	Send(*v1.StreamResponse) error
	grpc.ServerStream
}

type ambassadorWatchStreamServer struct {
	grpc.ServerStream
}

func (x *ambassadorWatchStreamServer) Send(m *v1.StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Ambassador_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ambassador.v1.Ambassador",
	HandlerType: (*AmbassadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Ambassador_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Ambassador_Disconnect_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _Ambassador_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Ambassador_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConduit",
			Handler:       _Ambassador_WatchConduit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchStream",
			Handler:       _Ambassador_WatchStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/ambassador/v1/tap.proto",
}
